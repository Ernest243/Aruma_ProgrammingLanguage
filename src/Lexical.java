import java.io.FileNotFoundException;
import java.util.Scanner;
import java.io.File;
import java.util.ArrayList;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

public class Lexical
{
	public static void main(String[] args) throws IOException 
	{
		//Testing...
		readSource("test");
	}
	
	/*
	 * This function will read the source code file & generate token
	 * for the syntax analyzer to be read.
	 */
	
	private static FileWriter readSource(String name) throws IOException
	{
		
		FileWriter tokens = new FileWriter("outputToSyntax.txt");
		PrintWriter writeToFile = new PrintWriter(tokens);
		ArrayList<String> tokensOutput = new ArrayList<String>();
		
		try 
		{
			Scanner input = new Scanner(new File(name));
			
			String line = "";
			
			while(input.hasNext()) 
			{
				line = input.nextLine();
				
				String[] lexemes = line.split(" ");
				
				for(String lex : lexemes) 
				{
					if(lex.matches(".*[a-zA-Z]")) 
					{
						tokensOutput.add("[STRING]");
					}
					
					else if(lex.matches("[+-]?[0-9][0-9]*")) 
					{
						tokensOutput.add("[INTEGER]");
					}
					
					else if(lex.matches("[+-]?[0-9]+(\\\\.[0-9]+)?([Ee][+-]?[0-9]+)?")) 
					{
						tokensOutput.add("[FLOAT]");
					}
					
					else if(lex.matches(".*[$&+,:;`=\\\\\\\\?@#|/'<>.^*\\\"{}()\\\\[\\\\]%!-]")) 
					{
						tokensOutput.add("[SPECIAL_CHAR]");
					}
					
					else
						tokensOutput.add("[UNDEFINED]");
				}
			}
			
			int x = 2;
			
			for(String s : tokensOutput) 
			{
				if(x % 2 == 0) 
				{
					writeToFile.println("->" + s);
				}
				else
					writeToFile.println(s);
				x++;
			}
			
			writeToFile.close();
		}
		catch(FileNotFoundException e) 
		{
			System.out.print("FILE NOT FOUND!");
		}
		
		return tokens;
	}
	
	
	/*
	 * This function will take as input the file generated by the 'readSource' func
	 * and check for keyword & data type & reserved word to generate tokens for
	 * the syntax analyzer
	 */
	@SuppressWarnings("unused")
	private static FileWriter generateTokens(File name) throws IOException
	{
		return null;
	}
}